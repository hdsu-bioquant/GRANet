#------------------------------------------------------------------------------#
#                       Parse config and sample information                    #
#------------------------------------------------------------------------------#
# IMPORT python libraries
from os.path import join
import csv
import re

# Import config file & parameters
configfile: 'config.yaml'



#------------------------------------------------------------------------------#
#                  Main path to store results and tmp data                     #
#------------------------------------------------------------------------------#
# Import paths from config file
DATAPATH        = config['main_working_directory']
seuratobj       = config['seuratobj']
seurat_annotCol = config['annotCol']
Arrowfiles      = config['Arrowfiles']

print('Arrowfiles:', Arrowfiles.values())
#print('Arrowfiles:', type(Arrowfiles))

windowSize =  str(config['tfActity_int']['regulons']['promoter_size'])

#------------------------------------------------------------------------------#
#                               Include extra rules                            #
#------------------------------------------------------------------------------#
# Include snakefiles containing figure rules
include: 'rules/atac.smk'
include: 'rules/rna.smk'
include: 'rules/TFactivity_specificRegulons.smk'


#------------------------------------------------------------------------------#
#                         Function to collect final files                      #
#------------------------------------------------------------------------------#
#helper function to collect final files from pipeline
def inputall(wilcards):
    collectfiles = []
    # Phase 1 ATAC-seq
    if config["phase01_scATAC"]["transferRNAlabels"]:
        collectfiles.append(join(DATAPATH, 'results/scatac/archr/ArchR01_transferLabels/Save-ArchR-Project.rds'))
    if config["phase01_scATAC"]["motifsMatch"]:
        collectfiles.append(join(DATAPATH, 'results/scatac/archr/ArchR02_MotifMatch/Save-ArchR-Project.rds'))
        
    # Phase 2 RNA-seq
    if config["phase02_scRNA"]["pySCENIC"]:
        # SCENIC
        collectfiles.append(join(DATAPATH, 'results/scrna/SCENIC/rnaseq_counts.tsv'))
        collectfiles.append(join(DATAPATH, 'results/scrna/SCENIC/expr_mat.adjacencies.tsv'))
        collectfiles.append(join(DATAPATH, 'results/scrna/SCENIC/expr_mat.adjacencies.cor.tsv'))
        # SCENIC
        collectfiles.append(join(DATAPATH, 'results/scrna/SCENIC/auc_mtx.csv'))
        collectfiles.append(join(DATAPATH, 'results/scrna/SCENIC/regulons.csv'))
        
    # Phase 3 
    if config["phase03_TFactivity"]["specificRegulons"]:
        # Cell type specific regulons
        # Method 2 - TF activity integration 
        #collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/regulon_stats.txt'))
        collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/regulonAUC.RDS'))
        #collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/regulonAUC_devCorrected.RDS'))
    
        
    if config["phase03_TFactivity"]["NMF_AUCscores"]:
        # Gene expression NMF
        collectfiles.append(join(DATAPATH, 'results/scrna/seurat/NMF_geneExpresion_' + windowSize + '.RDS'))
        # Regulon NMF
        #collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/NMF_regulonAUC_devCorrected.RDS'))
        collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/NMF_regulonAUC.RDS'))
        #collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/NMF_regulonAUC_devCorrected.RDS'))
        #collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/NMF_regulonAUC.RDS'))
        collectfiles.append(join(DATAPATH, 'results/scrna/SCENIC/NMF_auc_mtx_' + windowSize + '.RDS'))
        # Method 1 - TF activity integration 
        #collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulon_stats.txt'))
        #collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/tfRegulons_asDF.RDS'))
        #collectfiles.append(join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulonAUC_devCorrected.RDS'))
        #collectfiles.append(join(DATAPATH, 'results/scrna/SCENIC/expr_mat.adjacencies_arboreto.tsv'))
    # # NMF
    # if config["phase02_NMF"]["NMF_rnaseq"]:
    #     collectfiles.extend(expand(join(DATAPATH, 'reports/04_{type}_SE_targets_rnaseq_NMF_report.html'), zip, type = ["tumor", "cells"]))
    #     collectfiles.extend(expand(join(DATAPATH, 'reports/05_{type}_mostVariable_rnaseq_NMF_report.html'), zip, type = ["tumor", "cells"]))        
    # if config["phase02_NMF"]["NMF_chipseq"]:
    #     collectfiles.append(join(DATAPATH, 'reports/09_tumor_Enhancers_chipseq_NMF_report.html'))
    #     collectfiles.append(join(DATAPATH, 'reports/03_tumor_chipseq_NMF_report.html'))
    #return final list of all files to collect from the pipeline
    return collectfiles

# Collect pipeline result files
rule all:
    input: inputall
    
    
#------------------------------------------------------------------------------#
#                                Run NMF gene expression.                      #
#------------------------------------------------------------------------------#
rule NMF_scRNAseq:
    input:
        exprs    = seuratobj,
        regulonAUC_devCor = join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/regulonAUC.RDS')
    output:
        rmd = temp(join(DATAPATH, 'reports/NMF_' + windowSize + '_scRNAseq_gene_expression.Rmd')),
        nmf = join(DATAPATH, 'results/scrna/seurat/NMF_geneExpresion_' + windowSize + '.RDS')
    params:
        optimalK = 10,
        script = 'scripts/scRNA-seq/scRNAseq_NMF.Rmd',
        seurat_annotCol = seurat_annotCol
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        cp {params.script} {output.rmd}

        Rscript -e "rmarkdown::render( '{output.rmd}', \
                params = list( \
                  K         = {params.optimalK}, \
                  p_exprs   = '{input.exprs}', \
                  p_regulon = '{input.regulonAUC_devCor}', \
                  p_nmf = '{output.nmf}', \
                  annotCol = '{params.seurat_annotCol}' \
                ))"
        
        """


#------------------------------------------------------------------------------#
#                                Run NMF on Regulons                           #
#------------------------------------------------------------------------------#
rule NMF_method2_reg:
    input:
        exprs    = seuratobj,
        regulonAUC_devCor = join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/regulonAUC_devCorrected.RDS')
    output:
        rmd = temp(join(DATAPATH, 'reports/NMF_' + windowSize + '_Method2_regulonAUC_devCorrected.Rmd')),
        nmf = join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/NMF_regulonAUC_devCorrected.RDS')
    params:
        optimalK = 8,
        script = 'scripts/Regulon_NMF.Rmd',
        seurat_annotCol = seurat_annotCol
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        cp {params.script} {output.rmd}

        Rscript -e "rmarkdown::render( '{output.rmd}', \
                params = list( \
                  K         = {params.optimalK}, \
                  p_exprs   = '{input.exprs}', \
                  p_regulon = '{input.regulonAUC_devCor}', \
                  p_regulonAUC_devCor = '{input.regulonAUC_devCor}', \
                  p_nmf = '{output.nmf}', \
                  annotCol = '{params.seurat_annotCol}' \
                ))"
        
        """

rule NMF_method2_noreg:
    input:
        exprs    = seuratobj,
        regulonAUC = join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/regulonAUC.RDS')
        #regulonAUC_devCor = join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/regulonAUC_devCorrected.RDS')
    output:
        rmd = temp(join(DATAPATH, 'reports/NMF_' + windowSize + '_Method2_regulonAUC.Rmd')),
        nmf = join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/NMF_regulonAUC.RDS')
    params:
        optimalK = 8,
        script = 'scripts/Regulon_NMF.Rmd',
        seurat_annotCol = seurat_annotCol
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        cp {params.script} {output.rmd}

        Rscript -e "rmarkdown::render( '{output.rmd}', \
                params = list( \
                  K         = {params.optimalK}, \
                  p_exprs   = '{input.exprs}', \
                  p_regulon = '{input.regulonAUC}', \
                  p_regulonAUC_devCor = '{input.regulonAUC}', \
                  p_nmf = '{output.nmf}', \
                  annotCol = '{params.seurat_annotCol}' \
                ))"
        
        """


rule NMF_method1_reg:
    input:
        exprs    = seuratobj,
        regulonAUC_devCor = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulonAUC_devCorrected.RDS')
    output:
        rmd = temp(join(DATAPATH, 'reports/NMF_' + windowSize + '_Method1_regulonAUC_devCorrected.Rmd')),
        nmf = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/NMF_regulonAUC_devCorrected.RDS')
    params:
        optimalK = 8,
        script = 'scripts/Regulon_NMF.Rmd',
        seurat_annotCol = seurat_annotCol
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        cp {params.script} {output.rmd}

        Rscript -e "rmarkdown::render( '{output.rmd}', \
                params = list( \
                  K         = {params.optimalK}, \
                  p_exprs   = '{input.exprs}', \
                  p_regulon = '{input.regulonAUC_devCor}', \
                  p_regulonAUC_devCor = '{input.regulonAUC_devCor}', \
                  p_nmf = '{output.nmf}', \
                  annotCol = '{params.seurat_annotCol}' \
                ))"
        
        """

rule NMF_method1_noreg:
    input:
        exprs    = seuratobj,
        regulonAUC = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulonAUC.RDS')
        #regulonAUC_devCor = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulonAUC_devCorrected.RDS')
    output:
        rmd = temp(join(DATAPATH, 'reports/NMF_' + windowSize + '_Method1_regulonAUC.Rmd')),
        nmf = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/NMF_regulonAUC.RDS')
    params:
        optimalK = 8,
        script = 'scripts/Regulon_NMF.Rmd',
        seurat_annotCol = seurat_annotCol
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        cp {params.script} {output.rmd}

        Rscript -e "rmarkdown::render( '{output.rmd}', \
                params = list( \
                  K         = {params.optimalK}, \
                  p_exprs   = '{input.exprs}', \
                  p_regulon = '{input.regulonAUC}', \
                  p_regulonAUC_devCor = '{input.regulonAUC}', \
                  p_nmf = '{output.nmf}', \
                  annotCol = '{params.seurat_annotCol}' \
                ))"
        
        """


    
rule NMF_pySCENIC:
    input:
        exprs    = seuratobj,
        regulonAUC = join(DATAPATH, 'results/scrna/SCENIC/auc_mtx.RDS'),
        regulonAUC_devCor = join(DATAPATH, 'results/integrated/TF_activity_method2_' + windowSize + '/regulonAUC.RDS')
    output:
        rmd = temp(join(DATAPATH, 'reports/NMF_' + windowSize + '_pySCENIC_regulonAUC.Rmd')),
        nmf = join(DATAPATH, 'results/scrna/SCENIC/NMF_auc_mtx_' + windowSize + '.RDS')
    params:
        optimalK = 8,
        script = 'scripts/Regulon_NMF.Rmd',
        seurat_annotCol = seurat_annotCol
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        cp {params.script} {output.rmd}

        Rscript -e "rmarkdown::render( '{output.rmd}', \
                params = list( \
                  K         = {params.optimalK}, \
                  p_exprs   = '{input.exprs}', \
                  p_regulon = '{input.regulonAUC}', \
                  p_regulonAUC_devCor = '{input.regulonAUC_devCor}', \
                  p_nmf = '{output.nmf}', \
                  annotCol = '{params.seurat_annotCol}' \
                ))"
        
        """

#------------------------------------------------------------------------------#
#          Method 1: TF activity integrating scRNAseq and scATACseq data       #
#------------------------------------------------------------------------------#
rule tfm01_step4_RegulonStats:
    input:
        regulonAUC        = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulonAUC.RDS'),
        regulonAUC_devCor = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulonAUC_devCorrected.RDS'),
        regulonPySCENIC   = join(DATAPATH, 'results/scrna/SCENIC/auc_mtx.RDS')
    output:
        regulon_stats = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulon_stats.txt')
    params:
        script = 'scripts/tfActivity_int_method1/04_regulon_stats.R'
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        
        Rscript {params.script} {input.regulonAUC} {input.regulonAUC_devCor} \
        {input.regulonPySCENIC} {output.regulon_stats}
        
        """



rule tfm01_step3_RegulonActivity:
    input:
        archrproj  = join(DATAPATH, 'results/scatac/archr/ArchR02_MotifMatch/Save-ArchR-Project.rds'),
        #archrproj  = join(DATAPATH, 'results/scatac/archr/Save-projcovid6/Save-ArchR-Project.rds'), #
        exprs    = seuratobj,
        regulonAUC = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulonAUC.RDS')
    output:
        regulonAUC_devCor = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulonAUC_devCorrected.RDS')
    params:
        script = 'scripts/tfActivity_int_method1/03_RegulonActivity_NormMotifDeviation.R'
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        
        Rscript {params.script} {input.archrproj} {input.exprs} \
        {input.regulonAUC} {output.regulonAUC_devCor} 
        
        """


rule tfm01_step2_AUCcell_intregulons:
    input:
        exprs    = seuratobj,
        # exprs    = join(DATAPATH, 'results/scrna/seurat/rna_seurat_int_annot_transfer.RDS'),
        regulons = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/tfRegulons_asDF.RDS')
    output:
        aucellRankings = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/aucellRankings.RDS'),
        regulonAUC     = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/regulonAUC.RDS')
    params:
        script = 'scripts/tfActivity_int_method1/02_AUCcell_intRegulons.R',
        nCores = config['tfActity_int']['cores']
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        
        Rscript {params.script} {input.exprs} {input.regulons} \
        {output.aucellRankings} {output.regulonAUC} \
        {params.nCores}
        
        """

rule tfm01_step1_regulon_matchedMotifs_CoExprsModules:
    input:
        adjacencies = join(DATAPATH, 'results/scrna/SCENIC/expr_mat.adjacencies.cor.tsv'),
        archrproj  = join(DATAPATH, 'results/scatac/archr/ArchR02_MotifMatch/Save-ArchR-Project.rds'),
        #archrproj   = join(DATAPATH, 'results/scatac/archr/Save-projcovid6/Save-ArchR-Project.rds') #
    output:
        scenic_corrmodules = join(DATAPATH, 'results/scrna/SCENIC/tfModules_asDF.RDS'),
        regulons           = join(DATAPATH, 'results/integrated/TF_activity_' + windowSize + '/tfRegulons_asDF.RDS')
    params:
        script  = 'scripts/tfActivity_int_method1/01_regulon_matchedMotifs_CoExprsModules.R',
        genome               = config['genome'],
        importance_threshold = config['tfActity_int']['regulons']['importance_threshold'],
        promoter_size        = config['tfActity_int']['regulons']['promoter_size'],
        min_regulon_size     = config['tfActity_int']['regulons']['min_regulon_size']
    singularity:
        'docker://hdsu/r_scatac'
    shell:
        """
        
        Rscript {params.script} {input.adjacencies} {input.archrproj} \
        {output.scenic_corrmodules} {output.regulons} \
        {params.genome} {params.importance_threshold} \
        {params.promoter_size} {params.min_regulon_size}
        
        """

